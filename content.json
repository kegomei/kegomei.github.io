{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"","slug":"方法特性总结","date":"2019-09-03T09:14:12.322Z","updated":"2019-09-03T14:30:15.404Z","comments":true,"path":"2019/09/03/方法特性总结/","link":"","permalink":"http://yoursite.com/2019/09/03/方法特性总结/","excerpt":"","text":"方法特性总结数组方法 数组操作方法是否改变原数组： 是：reverse splice sort 否：slice concat map filter join slice reduce foreach可能改变","categories":[],"tags":[]},{"title":"","slug":"js题","date":"2019-08-19T15:08:35.794Z","updated":"2019-08-19T15:40:32.049Z","comments":true,"path":"2019/08/19/js题/","link":"","permalink":"http://yoursite.com/2019/08/19/js题/","excerpt":"","text":"计算给定数组 arr 中所有元素的总和 1234567891011//用reducefunction sum(arr) &#123; return arr.reduce(function(prev, curr, idx, arr)&#123; return prev + curr; &#125;);&#125;//用evalfunction sum(arr) &#123; return eval(arr.join(\"+\"));&#125;; 判断NaN Object.is(NaN, y)","categories":[],"tags":[]},{"title":"","slug":"输入输出","date":"2019-08-15T16:00:18.144Z","updated":"2019-09-03T07:37:04.993Z","comments":true,"path":"2019/08/16/输入输出/","link":"","permalink":"http://yoursite.com/2019/08/16/输入输出/","excerpt":"","text":"js输入输出 牛客输入首先 12345678910while(line=readline())&#123; line=line.split(' '); line.filter(function(v,i,a)&#123; a[i]=parseInt(v); &#125;) var array=[...line]&#125;//保留两位小数Math.round(num * 100) / 100 排序排序要写排序函数 123function sortNum()&#123; return a-b;&#125; 字符编码/[\\u4e00-\\u9fa5]/.test(str[i])","categories":[],"tags":[]},{"title":"es6对象","slug":"es6对象","date":"2019-04-24T01:37:30.000Z","updated":"2019-09-03T08:44:22.683Z","comments":true,"path":"2019/04/24/es6对象/","link":"","permalink":"http://yoursite.com/2019/04/24/es6对象/","excerpt":"","text":"ES6对象最近有一个需求，前端的vuex的store中有这样一个对象 123456user:&#123; phone_number:'', school:'', photo:'', name:''&#125; 要做的是后台返回一个对象给它赋值，后台mongodb的键名刚好一致，想直接将查询结果作为对象返回，然后前端进行循环复制，因为有不想返回的密码信息，于是 123456const back=&#123; name:ret[0].name, photo:ret[0].photo, school:ret[0].school, phone_number:ret[0].phone_number &#125; 然后，当我发现es6中对象有解构赋值以后，我发现我是个傻逼。。。直接赋值就行了，，会过滤掉没有的属性 即，将前端的对象发送给后端，后端赋值，再返回给前端，同样是直接赋值 于是乎，我决定好好开始研究下es6中的对象 解构赋值接着上面的解构赋值 let {a,b}={a:’1’,b:’2’}; 实际上是 let {a:a,b:b}={a:’1’,b:’2’};的简写形式 相当于是一种遍历赋值,将相应变量替换或者说赋值更贴切 解构赋值可以指定默认值，只有在赋值值严格等于undefined的时候才会生效 let {x,y=5}={x:1,y:null} //y=null let {x,y=5}={x:1} //y=5 生效 数组的解构赋值与对象类似，不同的是数组是按索引来的，是有序的依次赋值，对象是根据模式来匹配的 let [x,y]=[1,2,3] //x=1,y=2 下面总结一下用途 交换变量 1234let x = 1;let y = 2;[x, y] = [y, x]; 函数返回多个值的时候 直接将函数返回结果赋值给类似于[a,b,c]这样的变量数组 和开篇的例子一样 提取JSON中想要的数据作为新的对象 定义默认参数 1234567891011jQuery.ajax = function (url, &#123; async = true, beforeSend = function () &#123;&#125;, cache = true, complete = function () &#123;&#125;, crossDomain = false, global = true, // ... more config&#125; = &#123;&#125;) &#123; // ... do stuff&#125;; 遍历map 1234567const map = new Map();map.set('first', 'hello');map.set('second', 'world');for (let [key, value] of map) &#123; console.log(key + \" is \" + value);&#125; 最最常用的 加载模块 你不得不熟悉 1const &#123; SourceMapConsumer, SourceNode &#125; = require(\"source-map\"); 一些简写 第一个就是其实自己一直在用的方法的简写 123456789101112//es5中对象的方法const o = &#123; method: function() &#123; return \"Hello!\"; &#125;&#125;;//es6中const o = &#123; method() &#123; return \"Hello!\"; &#125;&#125;;//这种写法在我使用vue时经常用到，只不过觉得理所当然，其实它时es6里的 属性的简写 上面也说了，解构赋值实际上是属性的简写 123456const foo = 'bar';const baz = &#123;foo&#125;;baz // &#123;foo: \"bar\"&#125;// 等同于const baz = &#123;foo: foo&#125;;//属性名和值变量名同名 一些新的特性 属性名可以用表达式 1234567let propKey = 'foo';let obj = &#123; [propKey]: true, //实际上取了propKey的值‘foo’作为属性名 ['a' + 'bc']: 123&#125;;//也可以用来定义方法名 对象的方法和函数一样，有了name属性，返回方法名 如果方法是get或set来设置的，那么name属性在get和set上，而不死在方法名上，返回‘get 方法名’ bind方法创造的构造函数，name是“bound 原函数名” 在对象的方法中，super关键字指向对象的原型 相当于Object.getPrototypeOf(this) 遍历对象属性 for..in 遍历对象自身和继承的可枚举属性（不含Symbol） Object.keys（obj）：返回所有对象自身可枚举属性的key Object.getOwnPropertyNames(obj):返回一个数组，包含对象自身的所有属性（不含symbol）的key，包含继承 Object.getOwnPropertySymbols(obj):返回一个数组，包含对象自身的所有 Symbol 属性的键名。 Reflect.ownKeys(obj):返回数组，包含所有键名，所有，包含Symbol、字符串、不可枚举 以上的 5 种方法遍历对象的键名，都遵守同样的属性遍历的次序规则。 首先遍历所有数值键，按照数值升序排列。 其次遍历所有字符串键，按照加入时间升序排列。 最后遍历所有 Symbol 键，按照加入时间升序排列。 …运算符在es2018中，这个运算符被引入了对象 123456let &#123;...z&#125;=&#123;a:3,b:4&#125;//这时 z会被变成对象z==&#123; a:3, b:4&#125; 解构赋值必须是最后一个参数，且是浅拷贝 可以用来扩展函数的参数 也可以用来取出所有可遍历属性，如下： 1234567891011let z = &#123; a: 3, b: 4 &#125;;let n = &#123; ...z &#125;;n // &#123; a: 3, b: 4 &#125;//用来合并对象let ab = &#123; ...a, ...b &#125;;//同名属性会被...后面的属性覆盖let aWithOverrides = &#123; ...a, x: 1, y: 2 &#125;;//a对象中的x，y会被覆盖//设置默认属性let aWithDefaults = &#123; x: 1, y: 2, ...a &#125;;//x和y都有默认值 原型相关1234//创建没有原型的对象Object.create(null)//创建空对象Object.create(Object.prototype)","categories":[],"tags":[]},{"title":"记一次用node接收上传文件","slug":"记一次用node接收上传文件","date":"2019-04-22T10:18:38.000Z","updated":"2019-04-24T00:54:17.327Z","comments":true,"path":"2019/04/22/记一次用node接收上传文件/","link":"","permalink":"http://yoursite.com/2019/04/22/记一次用node接收上传文件/","excerpt":"","text":"node接收文件上传在做课程设计的时候有一个注册时上传用户头像的需求，先来说说自己的思路： 首先，前端上传图片，发送请求至后端 后端将文件接收，修改文件名，存入资源，然后将文件路径加入到用户信息的数据库中 服务端将文件url返回给前端，供用户预览 用户在使用页面时会直接使用数据库中该用户对应的头像url，显示出来 用户可以重新上传，重新上传后，更新文件，其他不变 后端express提供了一个插件multiparty可以完成后端的需求，目前仅了解到其处理文件方面的功能 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172//首先其他的挂载路由导入模块什么的我们不多说//安装 npm i multiparty --save//引入模块const multipaty=require('multiparty');//书写接收请求时的服务器要做的事情router.post('/savePhoto',function(err,res,next)&#123; //生成该对象并配置保存路径 const form=new multiparty.Form(&#123;uploadDir:'./dist/static'&#125;); //上传完成后的处理 form.parse(req,function(err,fields,files)&#123; let filesTemp(JSON.stringify(files,null,); if(err)&#123; console.log(err); &#125;else&#123; console.log('filesTemp');/*先来看看这里的输出，随便上传的一张图片&#123;\"file\":[&#123;\"fieldName\":\"file\",\"originalFilename\":\"TIM图片20190331192334.jpg\",\"path\":\".\\\\dist\\\\static\\\\D8M-A-Rh6fjD12qmubeIwhAG.jpg\",\"headers\":&#123;\"content-disposition\":\"form-data; name=\\\"file\\\"; filename=\\\"TIM图片20190331192334.jpg\\\"\",\"content-type\":\"image/jpeg\"&#125;,\"size\":662937&#125;]&#125;可以看到,这个时候图片已经存储到本地了，接下来就要进行重命名，方便后期被用户请求*/ //一些配置， const inputFile=files.file[0]; const uploadPath=inputFile.path; let fileName=req.cookies.user.num+'.'+inputFile.originalFilename.split('.')[1];//利用前端发来的cookie将文件命名为 电话号码.后缀名的格式 const dstPath='./dist/static/'+fileName; //首先判断服务器中是否已经有该命名的文件 fs.exists(dstPath,function(exists) &#123; if(exists)&#123; //如果有就删除 fs.unlink(dstPath,function(err) &#123; if(err)return console.log('删除失败'+err); //将上传文件重命名 （这里有一些小问题，如果文件格式不一样将不会删除，改进思路是只判断文件名，不考虑后缀） fs.rename(uploadPath,dstPath,function(err) &#123; if(err)&#123; console.log('rename error'+err); &#125;else &#123; console.log('rename ok'); //更新数据库中用户头像路径 users_personal.update(&#123;phone_number:req.cookies.user.num&#125;,&#123;photo:'/static/'+fileName&#125;,function(err) &#123; if(err) return console.log(err); //查询数据库并将数据更新到cookie users_personal.find(&#123;phone_number: req.cookies.user.num&#125;,'password name photo school gender phone_number',function(err,ret)&#123; res.cookie('user',&#123; name:ret[0].name, photo:ret[0].photo, school:ret[0].school, gender:ret[0].gender, num:ret[0].phone_number &#125;,&#123; maxAge: 600000 &#125;); res.json(response); &#125;) &#125;) &#125; &#125;) &#125;) &#125;else &#123;//如果没有就直接重命名并更新数据库返回结果 fs.rename(uploadPath,dstPath,function(err) &#123; if(err)&#123; console.log('rename error'+err); &#125;else &#123; console.log('rename ok'); &#125; &#125;) &#125; &#125;) &#125; &#125;)&#125;) 问题可以看到，上面的代码已经可以看到回调地狱的雏形了，对此我感到十分荣幸，能够接触到真正的回调地狱，因此下一步的计划自然是优化，用promise封装 前端前端在后台图片更新后前端图片并不会自动更新，因为图片路径没有变，所以还是从缓存中加载图片 解决办法是在图片路径后面加上一个随机数作为请求参数，由于该参数是无意义的，所以不影响 我用的是vue框架，因此前端要做的就是给路径后加一个”?t=tmp” 在图片更换请求的回调中改变tmp就行了","categories":[],"tags":[]},{"title":"vue钩子函数的使用分析","slug":"vue钩子函数的使用分析","date":"2019-04-14T15:11:18.000Z","updated":"2019-04-14T15:11:18.325Z","comments":true,"path":"2019/04/14/vue钩子函数的使用分析/","link":"","permalink":"http://yoursite.com/2019/04/14/vue钩子函数的使用分析/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"js执行","slug":"js执行","date":"2019-04-07T06:45:25.000Z","updated":"2019-04-07T10:53:51.622Z","comments":true,"path":"2019/04/07/js执行/","link":"","permalink":"http://yoursite.com/2019/04/07/js执行/","excerpt":"","text":"客户端的js浏览器可以认为是一个web应用的操作系统 所有的js代码可以看作一个js程序 js执行分为两个主要阶段 文档加载和脚本执行 创建Document对象，并且开始解析Web页面，解析html元素和其文本内容后i俺家element对象的text节点到文档中，在此阶段document.readystate的值是“loading” 当html解析器没有遇到async和defer属性的标签是，会把该元素添加到文档中，然后执行行内或外部脚本。他们会同步执行，并且在脚本下载和执行时html解析器会暂停。这是脚本就可以用document.write来把文本插入到输入流中。解析器回复时这些文本才会成为文档的一部分。 同步脚本可以干的事情 定义函数和注册事件 遍历操作之前的dom树 如果遇到的时async属性的标签,下载脚本，解析器不会暂停。但会在下载完后尽快执行。异步脚本时不可以使用document.write 当文档完成解析，document.readystate会变成“interactive” 这个时候，defer属性的标签，会按照在文档里的顺序执行，异步脚本也有可能在这个时候执行，同样无法使用document.write 之后，浏览器在document对象上触发DOMContentLoaded事件。这个时候就进入第二阶段，即事件驱动阶段，但是可能仍然由异步的脚本没执行 事件驱动阶段 这个时候，文档的解析才算全部完成，但是浏览器可能还在等待其他内容载入，比如图片。当所有的这些内容完成载入时，并且所有的异步脚本完成载入和执行，document的ready state属性才会变为complete 从此刻起，会调用异步事件，以相应用户输入事件、网络事件、计时器过期等 以上时间线只是理想状态，但是在实际过程中，浏览器处理的细节是不一样的。对于很长的文档或非常慢的网络链接，web浏览器理论上会渲染一部分文档，并且在所有脚本执行之前就能允许用户开始和页面交互了这种情况下，用户输入事件可能在程序执行的事件驱动器阶段开始之前触发","categories":[],"tags":[]},{"title":"let和const","slug":"let和const","date":"2019-04-03T12:07:42.000Z","updated":"2019-04-03T12:07:42.470Z","comments":true,"path":"2019/04/03/let和const/","link":"","permalink":"http://yoursite.com/2019/04/03/let和const/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"作用域和闭包","slug":"作用域和闭包","date":"2019-04-03T12:01:45.000Z","updated":"2019-09-03T07:49:40.724Z","comments":true,"path":"2019/04/03/作用域和闭包/","link":"","permalink":"http://yoursite.com/2019/04/03/作用域和闭包/","excerpt":"","text":"闭包和作用域、this函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种现象称为闭包————JavaScript权威指南 以上是犀牛书上对闭包的解释，也就是说，所有的函数都是闭包（除了new，稍后会说） 要去解释这个特性，就不得不说说JS的作用域规则了 作用域123456789101112let cao=()=&gt;&#123; a=2;&#125;function ri()&#123; var a=1; cao(); console.log(a);&#125;ri(); //1console.log(a);//2 看看上面这个例子，有两个作用域，一个是全局作用域，在预解释的过程中操里面的a是全局的啊，因此，即使是在ri里执行草修改的还是全局的， 访问闭包清楚了作用域，我们就可以很好的利用作用域链这个工具去访问闭包。 12345678910111213function makeCounter() &#123; let count = 0; return function() &#123; return count++; // has access to the outer counter &#125;;&#125;let counter = makeCounter();alert( counter() ); // 0alert( counter() ); // 1alert( counter() ); // 2 上面的代码就利用了返回一个嵌套函数去访问闭包中的变量，让我们用作用域链的规则去解释其原理 一开始的时候，只有一个函数makeCounter，因此只存在一个全局的词法环境。词法环境存着两个东西，一个是环境记录，记录局部变量，在这个词法环境中只有一个makeCounter。另一个东西是【environment】，是一个隐藏的属性，指向外部环境的环境记录，此处为null，因此，外部属性是可访问的，而自己的环境记录是可以被内部词法环境所访问。 makeCounter内部又是一个新的词法环境。它的环境记录中有count，【environment】指向外部环境记录，此处为全局，而全局中有makeCounter供其访问。 下一层function，又是一个新的词法环境。他的环境记录无属性，但是，重点来了重点来了啊，他的【environment】属性指向的词法环境中可是有一个count，因此有且仅有该函数可以访问外部的count！ 再下一步，在将makeCounter赋值给counter时，是将其嵌套函数赋给了counter，而嵌套函数是一个地址，而地址有存放着该函数被创建时的词法环境，而又有一个变量指向该地址，因此，该作用域或者说变量count在函数调用完以后并不会被清除 1234567891011121314151617181920212223242526272829303132333435363738394041//阮大神封装的遍历器，利用闭包var it = makeIterator(['a', 'b']);it.next() // &#123; value: \"a\", done: false &#125;it.next() // &#123; value: \"b\", done: false &#125;it.next() // &#123; value: undefined, done: true &#125;function makeIterator(array) &#123; var nextIndex = 0; return &#123; next: function() &#123; return nextIndex &lt; array.length ? &#123;value: array[nextIndex++], done: false&#125; : &#123;value: undefined, done: true&#125;; &#125; &#125;;&#125;//自己封装过的计算top值的闭包/**需吸顶head类*利用闭包的特性，保留选择器，每次重新计算top只需再调用一次即可* */function topObj(key) &#123; this.key=key; var tk=this.key; return function () &#123; return &#123; key:tk, top:$(tk).find('.hd').offset().top, bottom:$(tk).find('.hd').offset().top+$(tk).height() &#125; &#125;&#125;//用来重新计算top的方法，遍历数组调用里面的每一个闭包重新赋值function calculate() &#123; for(var i=0;i&lt;CalculateFuncs.length;i++)&#123; needFixObjs[i]=CalculateFuncs[i](); &#125;&#125;","categories":[],"tags":[]},{"title":"原型、对象、继承","slug":"原型、对象、继承","date":"2019-04-03T11:57:55.000Z","updated":"2019-04-03T11:57:55.721Z","comments":true,"path":"2019/04/03/原型、对象、继承/","link":"","permalink":"http://yoursite.com/2019/04/03/原型、对象、继承/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"js预解释","slug":"js预解释","date":"2019-03-27T11:55:18.000Z","updated":"2019-09-03T07:36:55.604Z","comments":true,"path":"2019/03/27/js预解释/","link":"","permalink":"http://yoursite.com/2019/03/27/js预解释/","excerpt":"","text":"js中的预解释js中变量声明提升函数定义提升可以说时js这门语言的一大特色，首先要了解的是js执行的环境 js执行环境 全局作用域：在浏览器加载html页面的时候，会为js提供一个全局作用域global，也叫顶级作用域window js的内存空间分两种：栈内存和堆内存 栈内存：提供js代码执行环境，存储基本数据类型，全局作用域和私有作用域其实都是栈内存 堆内存：存储引用类型如对象的属性名 预解释机制了解过js的执行开始过程和内存空间种类后，理解预解释会容易一些，注意，上面只是大概的描述了js开始执行的过程，整个的执行过程会开辟新的章节 预解释的时机在代码执行之前，也就是说仅仅是词面上的（除了return），包括if不成立中的 分作用域分别预解释预解释是根据作用域来“分别”进行的，首先一开始实在全局作用域之下，而全局作用域下又有很多被函数所划分的私有作用域，在私有作用域下执行的预解释规则和在全局作用域下是一样的 哪些东西需要预解释？只有有名不立即执行函数和定义的变量！！ 因此，匿名立即执行函数是不会进行预解释，return后面的函数同样只是作为值的返回，不预解释 等号右边的函数不预解释 对于变量，var是需要与解释的，let/const不是不需要预解释，而是另一种机制，在后面会介绍到。而未声明的变量和等号右边的变量都不进行预解释 12345console.log(b);b=1; //error:Uncaught ReferenceError: a is not definedconsole.log(b);var a=b=1; //error:Uncaught ReferenceError: a is not defined 怎样预解释？分为变量和函数分别说明 var变量12var a=1；var a=2； 变量是存储在栈内存中的 在预解释的时候，会为所有全局作用域下的var变量开辟一个内存空间，此时他们的值是undefined 在执行到变量定义语句的时候，才会开辟给“1”的空间，将二者联系起来 一个作用域内同名变量只会预解释一次，因此只有一个内存空间，但是赋值操作却会多次进行 function与变量一样，首先会未全局作用域下的所有不匿名不立即执行的函数进行预解释 为函数的代码创建一个堆内存，将函数的代码以字符串的形式存储下来。而为函数名创建一个栈内存的空间，存放函数代码的地址。 因此，函数在声明之前就已经可以调用。但是仅限自己代码块内，比如下面例子 12345678910111213var a=1; console.log(b);//undefined cao();//error if(a==0)&#123; var b=1; function cao() &#123; alert('cao'); &#125; &#125;else &#123; function cao() &#123; alert('wocao'); &#125; &#125; 而函数作用域内的预解释只在函数执行的时候才开始进行，规则和全局作用域下的预解释规则一样 用表达式声明的函数，不进行预解释 总结一下，var和function在预解释上的机制还是有所不同的，都有自己牛逼的地方。var牛逼在他无处不在，但却不是处处有值。function处处有用，但是却被花括号限制的死死的 最后，大大的标题要给let let 声明会提升到块顶部 从块顶部到该变量的初始化语句，这块区域叫做 TDZ（临时死区） 如果你在 TDZ 内使用该变量，JS 就会报错 究竟是什么原因？上文中说了，var在预解释时，开辟内存空间，并将值赋为undefined 但是let不一样，let虽然在预解释的过程中也会开辟空间给他用，但是他的值是没有的，很可怜，连undefined都没有！ 因此，let变量创建过程有提升的，但是初始化并没有提升 123456var tmp = 123;if (true) &#123; tmp = 'abc'; // ReferenceError let tmp;&#125; 这是会报错的，因为let让tmp在一个暂时性死区当中了 12345678910111213141516171819function cao() &#123; a=2;&#125;//用letif(2&gt;1)&#123; let a=1; cao(); console.log(a); //1&#125;//不带ifvar a=1;cao();console.log(a);//2//用varif(2&gt;1)&#123; var a=1; cao(); console.log(a); //2&#125;","categories":[],"tags":[]},{"title":"js类型转换和运算符","slug":"js类型转换和运算符","date":"2019-03-24T13:27:42.000Z","updated":"2019-03-24T17:31:27.302Z","comments":true,"path":"2019/03/24/js类型转换和运算符/","link":"","permalink":"http://yoursite.com/2019/03/24/js类型转换和运算符/","excerpt":"","text":"类型转换和运算符js中的类型转换算是我买入js的第一个坑了，特此记录一下 首先是几种基本类型注意点number 表示所有数字 infinity表示无穷大，也就是除以0的结果 NaN表示不是数字，比如string/number String 没有单字符类型 Boolean 只有true和false null和undifined 二者自成一体作为单独的类型 null表示无，undifined表示未被赋值 这篇博客不涉及object的类型转换，只涉及上述类型，因此以下算是这五种类型的一个集合 上述基本类型的转换规则转换为String 除了空数组转换为“”、-0转换为“0”意外，所有的都是转换成字面量 []为其中所有元素的逗号拼接 alert会自动将内容转换成String 转换为数字 undifined和字面量不是纯数字的字符串=&gt;NaN null和空字符串=&gt;0 true和false对应1和0 单个数字元素的数组会被转换成该数字元素，空数组被转换成0，而其他的数组则 字符串转成成数字时，会去除空格和前导0 转换成布尔 较简单，记住，除了空字符0、-0、undifined、null和NaN，其他全部转换成true 注意，即使是“0”、“ ”也会转换成true 上述是如何转的规则，那么接下来我们将探讨何时会转的问题 何时转算术运算符+号 当其作为二元运算符时，会实现拼接，当左右只有数字时，直接加 当其作为一元运算符时，会将其后的东西转换成数字看一个例子： 123let apple=\"2\";let orange=\"3\";alert(+apple++orange);//结果为5，因为a和o前面的第一个+将二者变成了数字，然后中间的+将二者相加了 /和- *123456alert(2-'1');//1alert('6'/'2');//3alert(2-'cao');//NaNalert('2'*'3');//6alert('3'*2);//6alert(2*null);//0 因此，这三个的共同点都是先尝试将左右转换成数字，在进行运算 比较运算符比较运算符两边是不同类型的值的时候，会将两边都转换为数字再进行比较，但有特例，稍后会提到 12alert(true&gt;false);//truealert('01'==1);//true 下面这个例子可能会有一点奇怪，但明白转换机制就不难理解 1234567let a = 0;alert( Boolean(a) ); // falselet b = \"0\";alert( Boolean(b) ); // truealert(a == b); // true! 还有更加奇怪的便是null和undifined这两个不听话的家伙了 首先，他们两个都有他们自己的相等监测机制，注意：只是相等，不包括不等运算 ===中null和undifined只能等于自己，而在==中他们可以互相相等 并且，undifined不参与任何比较，只和null或者自己相等，和其他任何值进行任何比较都是false，看两个例子 1234567alert( null &gt; 0 ); // (1) falsealert( null == 0 ); // (2) falsealert( null &gt;= 0 ); // (3) *!*true*/!*alert( undefined &gt; 0 ); // false (1)alert( undefined &lt; 0 ); // false (2)alert( undefined == 0 ); // false (3) 还有一个NaN，更过分，和谁都不等，包括自己！！ 可以通过x！==X来判断是否为NaN","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-03-24T02:01:18.604Z","updated":"2017-10-28T00:39:58.000Z","comments":true,"path":"2019/03/24/hello-world/","link":"","permalink":"http://yoursite.com/2019/03/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}